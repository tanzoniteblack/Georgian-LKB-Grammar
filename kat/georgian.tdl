;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Georgian
;;; created at:
;;;     Fri Jan 20 09:37:56 UTC 2012
;;; based on Matrix customization system version of:
;;;     Fri Jan 20 01:36:16 UTC 2012
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

inflected :+ [ NOUN-CASE-SUFFIX-FLAG luk,
    1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG luk,
    DETERMINER-CASE-SUFFIX-FLAG luk,
    TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG luk,
    OBJ_PREFIX-FLAG luk,
    SA-FLAG luk,
    PSF-FLAG luk,
    NOUN-PLURALITY-FLAG luk,
    PREVERB-FLAG luk ].

infl-satisfied :+ [ NOUN-CASE-SUFFIX-FLAG na-or-+,
    1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG na-or-+,
    DETERMINER-CASE-SUFFIX-FLAG na-or-+,
    TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG na-or-+,
    OBJ_PREFIX-FLAG na-or-+,
    SA-FLAG na-or-+,
    PSF-FLAG na-or-+,
    NOUN-PLURALITY-FLAG na-or-+,
    PREVERB-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
dat := case.  ; dative
erg := case.  ; ergative
abs+nom := case.
abs := abs+nom.
nom := abs+nom.

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Tense

past := tense.
non-past := tense.
future := non-past.
present := non-past.

;;; Aspect

perfective := aspect.
imperfective := aspect.

;;; Mood

subjunctive := mood.
indicative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

general-noun-lex := noun-lex & noun-case-suffix-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ NOUN-CASE-SUFFIX-FLAG -,
                NOUN-PLURALITY-FLAG - ] ].

1sg-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM singular ] ].

2sg-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                       PER 2nd ] ].

3sg-pro-nom-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs+nom,
                   CONT.HOOK.INDEX.PNG [ NUM singular,
                                         PER 3rd ] ] ].

1pl-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM plural ] ].

2pl-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM plural ] ].

3pl-pro-nom-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM plural ],
                   CAT.HEAD.CASE nom ] ].

3sg-pro-dat-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE dat,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM singular ] ] ].

3pl-pro-dat-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE dat,
                   CONT.HOOK.INDEX.PNG [ NUM plural,
                                         PER 3rd ] ] ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item & 1st_2nd_person_subj_prefixes-rule-dtr & 3rd_subj_suffix-rule-dtr & PSF-rule-dtr & SA-rule-dtr & preverb-rule-dtr & tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED [ SA-FLAG na-or--,
                PREVERB-FLAG -,
                OBJ_PREFIX-FLAG - ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

trans-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ],
    INFLECTED [ TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG -,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG - ] ].

intran-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
    INFLECTED [ TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG -,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG - ] ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ],
    INFLECTED.DETERMINER-CASE-SUFFIX-FLAG - ].

indeterminate-determiner-lex := determiner-lex.

; Type for negative adverbs.
; 
; Constrain the MOD value of this adverb to keep
; 
;     it from modifying the kind of verbs which can select it,
; 
;     To keep spurious parses down, as a starting point, we have
; 
;     assumed that it only modifies verbs (e.g., non-finite verbs).

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT.HEAD verb,
                                    LIGHT + ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

preverb-rule-dtr := word-or-lexrule.
tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr := word-or-lexrule.
noun-case-suffix-rule-dtr := word-or-lexrule.
1st_2nd_person_subj_prefixes-rule-dtr := word-or-lexrule.
3rd_subj_suffix-rule-dtr := word-or-lexrule.
SA-rule-dtr := word-or-lexrule.
PSF-rule-dtr := word-or-lexrule.

;;; Lexical rule types

noun-case-suffix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG +,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR noun-case-suffix-rule-dtr &
        [ INFLECTED [ 1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

nominative-noun-lex-rule := noun-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abs+nom ].

dative-noun-lex-rule := noun-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

ergative-noun-lex-rule := noun-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

noun-plurality-lex-rule-super := add-only-no-ccont-rule & noun-case-suffix-rule-dtr &
  [ INFLECTED [ NOUN-PLURALITY-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR general-noun-lex &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

singular-noun-lex-rule := const-lex-rule & noun-plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

plural-noun-lex-rule := infl-lex-rule & noun-plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

1st_2nd_person_subj_prefixes-lex-rule-super := 3rd_subj_suffix-rule-dtr & PSF-rule-dtr & SA-rule-dtr & add-only-no-ccont-rule & preverb-rule-dtr & tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
  [ INFLECTED [ 1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR 1st_2nd_person_subj_prefixes-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

1st_subj_prefix-lex-rule := 1st_2nd_person_subj_prefixes-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2nd_subj_prefix-lex-rule := 1st_2nd_person_subj_prefixes-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

obj_prefix-lex-rule-super := 1st_2nd_person_subj_prefixes-rule-dtr & 3rd_subj_suffix-rule-dtr & PSF-rule-dtr & SA-rule-dtr & add-only-no-ccont-rule & preverb-rule-dtr & tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
  [ INFLECTED [ OBJ_PREFIX-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                PSF-FLAG #psf,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR verb-lex &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      PSF-FLAG #psf,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

2nd_obj_prefix-lex-rule := infl-lex-rule & obj_prefix-lex-rule-super &
  [ INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

3rd_obj_prefix-lex-rule := const-lex-rule & obj_prefix-lex-rule-super &
  [ INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
    DTR.INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

1st_pl_obj_prefix-lex-rule := infl-lex-rule & obj_prefix-lex-rule-super &
  [ INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
    DTR.INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                 PER 1st ] ].

1st_sg_obj_prefix-lex-rule := infl-lex-rule & obj_prefix-lex-rule-super &
  [ INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
    DTR.INFLECTED.1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                 PER 1st ] ].

preverb-lex-rule-super := 3rd_subj_suffix-rule-dtr & PSF-rule-dtr & SA-rule-dtr & add-only-no-ccont-rule & tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
  [ INFLECTED [ PREVERB-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                SA-FLAG #sa ],
    DTR preverb-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      SA-FLAG #sa ] ] ].

NOPRE_present-lex-rule := const-lex-rule & preverb-lex-rule-super &
  [ INFLECTED.PSF-FLAG -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

has_preverb_future-lex-rule := infl-lex-rule & preverb-lex-rule-super &
  [ INFLECTED.PSF-FLAG -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

has_preverb_other-lex-rule := infl-lex-rule & preverb-lex-rule-super &
  [ INFLECTED.PSF-FLAG #psf,
    DTR.INFLECTED.PSF-FLAG #psf ].

PSF-lex-rule-super := 3rd_subj_suffix-rule-dtr & SA-rule-dtr & add-only-no-ccont-rule & tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
  [ INFLECTED [ PSF-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR PSF-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

PSF_null-lex-rule := PSF-lex-rule-super & const-lex-rule.

PSF_av-lex-rule := PSF-lex-rule-super & infl-lex-rule.

tense_marker_with_PSF-lex-rule-super := 3rd_subj_suffix-rule-dtr & add-only-no-ccont-rule &
  [ INFLECTED [ TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                SA-FLAG #sa,
                PSF-FLAG #psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PREVERB-FLAG #preverb ],
    DTR tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      SA-FLAG #sa,
                      PSF-FLAG #psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PREVERB-FLAG #preverb ] ] ].

past_imperfective-lex-rule := infl-lex-rule & tense_marker_with_PSF-lex-rule-super &
  [ DTR.INFLECTED.SA-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     ASPECT imperfective ] ].

present_future_suffix-lex-rule := const-lex-rule & tense_marker_with_PSF-lex-rule-super &
  [ DTR.INFLECTED.SA-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE non-past ].

tense_marker_no_PSF-lex-rule-super := 3rd_subj_suffix-rule-dtr & add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                SA-FLAG #sa,
                PSF-FLAG #psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PREVERB-FLAG #preverb ],
    DTR tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      SA-FLAG #sa,
                      PSF-FLAG #psf & na,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PREVERB-FLAG #preverb ] ] ].

past_perfective_suffix_i-lex-rule := tense_marker_no_PSF-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     ASPECT perfective ] ].

SA-lex-rule-super := 3rd_subj_suffix-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & tense_marker_no_PSF-or-tense_marker_with_PSF-rule-dtr &
  [ INFLECTED [ SA-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                PSF-FLAG #psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PREVERB-FLAG #preverb ],
    DTR SA-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      PSF-FLAG #psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PREVERB-FLAG #preverb ] ] ].

past_imperfective_SA-lex-rule := SA-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     ASPECT perfective ] ].

3rd_subj_suffix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ 1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR 3rd_subj_suffix-rule-dtr &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

3_sg_subj_pres-lex-rule := 3rd_subj_suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 3rd ] ].

determiner-case-suffix-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ DETERMINER-CASE-SUFFIX-FLAG +,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                SA-FLAG #sa,
                PREVERB-FLAG #preverb ],
    DTR determiner-lex &
        [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      1ST_2ND_PERSON_SUBJ_PREFIXES-OR-2ND_OBJ_PREFIX-OR-3RD_SUBJ_SUFFIX-FLAG #1st_2nd_person_subj_prefixes-or-2nd_obj_prefix-or-3rd_subj_suffix,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TENSE_MARKER_NO_PSF-OR-TENSE_MARKER_WITH_PSF-FLAG #tense_marker_no_psf-or-tense_marker_with_psf,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      SA-FLAG #sa,
                      PREVERB-FLAG #preverb ] ] ].

nominative-deter-lex-rule := determiner-case-suffix-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE abs+nom ].

dative-deter-lex-rule := const-lex-rule & determiner-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE dat ].

ergative-deter-lex-rule := determiner-case-suffix-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE erg ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus.

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
