;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Georgian
;;; created at:
;;;     Mon Jan 30 19:19:50 UTC 2012
;;; based on Matrix customization system version of:
;;;     Sat Jan 21 21:34:57 UTC 2012
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

inflected :+ [ TRANS-TENSE-FLAG luk,
    PREVERB-FLAG luk,
    2ND_OBJ_PREFIX-FLAG luk,
    PSF-FLAG luk,
    INTRANS-TENSE-FLAG luk,
    3_SUBJ-TRANS-FLAG luk,
    OBJ_PREFIX-FLAG luk,
    NOUN-PLURALITY-FLAG luk,
    NOUN-CASE-SUFFIX-FLAG luk,
    TENSE_AND_3RD_SUBJ-FLAG luk,
    ADJ-CASE-SUFFIX-FLAG luk,
    DETERMINER-CASE-SUFFIX-FLAG luk,
    GENERAL_ENDING_VOWEL-NOUN-FLAG luk,
    PREVERB_OTHER-FLAG luk,
    INTRANS-VERB-FLAG luk,
    TRANS-VERB-FLAG luk,
    3_SUBJ-INTRANS-FLAG luk,
	TYPE-4 luk
].

infl-satisfied :+ [ TRANS-TENSE-FLAG na-or-+,
    PREVERB-FLAG na-or-+,
    2ND_OBJ_PREFIX-FLAG na-or-+,
    PSF-FLAG na-or-+,
    INTRANS-TENSE-FLAG na-or-+,
    3_SUBJ-TRANS-FLAG na-or-+,
    OBJ_PREFIX-FLAG na-or-+,
    NOUN-PLURALITY-FLAG na-or-+,
    NOUN-CASE-SUFFIX-FLAG na-or-+,
    TENSE_AND_3RD_SUBJ-FLAG na-or-+,
    ADJ-CASE-SUFFIX-FLAG na-or-+,
    DETERMINER-CASE-SUFFIX-FLAG na-or-+,
    GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-+,
    PREVERB_OTHER-FLAG na-or-+,
    INTRANS-VERB-FLAG na-or-+,
    TRANS-VERB-FLAG na-or-+,
    3_SUBJ-INTRANS-FLAG na-or-+,
    TYPE-4 na-or-+
].

png :+ [ PER person,
    NUM number ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
abs+nom := case.
abs := abs+nom.
nom := abs+nom.
non-abs+nom := case.
erg := non-abs+nom.
dat := non-abs+nom.

;;; Person

person := *top*.
3rd := person.
non-3rd := person.
2nd := non-3rd.
1st := non-3rd.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Tense

past := tense.
non-past := tense.
future := non-past.
present := non-past.

;;; Aspect

perfective := aspect.
imperfective := aspect.

;;; Mood

subjunctive := mood.
indicative := mood.
optative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

general_ending_consonant-noun-lex := noun-lex & noun-case-suffix-rule-dtr & noun-plurality-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ NOUN-CASE-SUFFIX-FLAG -,
                NOUN-PLURALITY-FLAG -,
                GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ] ].

1sg-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK[ INDEX [ PNG [ PER 1st,
                                       NUM singular ],
								  COG-ST activ-or-more, SPECI + ],
							--ICONS focus ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

2sg-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK[ INDEX [PNG [ NUM singular,
                                       PER 2nd ],
								  COG-ST activ-or-more, SPECI + ],
							--ICONS focus ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

3sg-pro-nom-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs+nom,
                   CONT.HOOK.INDEX [PNG [ NUM singular,
                                         PER 3rd ],  
								  COG-ST activ-or-more, SPECI + ] ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

1pl-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK[ INDEX [PNG [ PER 1st,
                                       NUM plural ],
								  COG-ST activ-or-more, SPECI + ],
							--ICONS focus],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

2pl-pro-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK[ INDEX [PNG [ PER 2nd,
                                       NUM plural ],
								  COG-ST activ-or-more, SPECI + ],
							--ICONS focus],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

3pl-pro-nom-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX [PNG [ PER 3rd,
                                         NUM plural ],
								  COG-ST activ-or-more, SPECI + ],
                   CAT.HEAD.CASE nom ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

3sg-pro-dat-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE dat,
                   CONT.HOOK.INDEX [PNG [ PER 3rd,
                                         NUM singular ],
								  COG-ST activ-or-more, SPECI + ] ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

3pl-pro-dat-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE dat,
                   CONT.HOOK.INDEX [PNG [ NUM plural,
                                         PER 3rd ],
								  COG-ST activ-or-more, SPECI + ] ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

general_ending_vowel-noun-lex := noun-lex & noun-case-suffix-rule-dtr & noun-plurality-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ NOUN-CASE-SUFFIX-FLAG -,
                NOUN-PLURALITY-FLAG -,
                GENERAL_ENDING_VOWEL-NOUN-FLAG + ] ].

3sg-pro-erg-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX [PNG [ NUM singular,
                                         PER 3rd ],
								  COG-ST activ-or-more, SPECI + ] ],
    INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG na-or-- ].

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;     lexical Vs for V-level attachment of negative adverbs.

verb-lex := basic-verb-lex & non-mod-lex-item & 1_2_plurality-rule-dtr & 1st_2nd_person_subj_prefixes-rule-dtr & PSF-rule-dtr & preverb-rule-dtr & tense_and_3rd_subj-rule-dtr &
  [ ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED [ PSF-FLAG na-or--,
                PREVERB-FLAG -,
                PREVERB_OTHER-FLAG na-or--,
                2ND_OBJ_PREFIX-FLAG na-or--,
                TENSE_AND_3RD_SUBJ-FLAG - ],
    SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ],
                         HC-LIGHT - ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun,
    INFLECTED [ INTRANS-VERB-FLAG +,
                TRANS-VERB-FLAG na-or-- ] ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    INFLECTED [ TRANS-VERB-FLAG +,
                INTRANS-VERB-FLAG na-or-- ] ].

trans-verb-lex := transitive-verb-lex &
  [ INFLECTED [ TRANS-TENSE-FLAG -, OBJ_PREFIX-FLAG -,
    TYPE-4 na-or-- ] ].

trans-type4-verb-lex := transitive-verb-lex &
  [ INFLECTED [ TRANS-TENSE-FLAG -,
				OBJ_PREFIX-FLAG +,
				TYPE-4 + ] ].

intrans-verb-lex := intransitive-verb-lex &
  [ INFLECTED [ PREVERB-FLAG -,
                3_SUBJ-INTRANS-FLAG -,
                INTRANS-TENSE-FLAG - ] ].

can-verb-lex := verb-lex & trans-first-arg-raising-lex-item-1
  [  INFLECTED [ TRANS-TENSE-FLAG -,
				 OBJ_PREFIX-FLAG +,
				 TYPE-4 + ],
	 SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
							  COMPS < #comps >,
							  SPR < > ] ],
	 ARG-ST < #subj ,
             #comps &
             [ LOCAL [CAT [ VAL [ SUBJ < >,
                                 COMPS < > ],
                           HEAD +vj ],
					  CONT.HOOK.INDEX.E.MOOD optative ] ] > ].
;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

demonstrative_a_rel := predsort.
proximal+dem_a_rel := demonstrative_a_rel. ; close to speaker
distal+dem_a_rel := demonstrative_a_rel.   ; away from speaker
remote+dem_a_rel := distal+dem_a_rel.      ; away from speaker and hearer
hearer+dem_a_rel := distal+dem_a_rel.      ; near hearer

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

indeterminate-determiner-lex := determiner-lex-supertype & determiner-lex & single-rel-lex-item &
  [ INFLECTED.DETERMINER-CASE-SUFFIX-FLAG - ] & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CONT.HOOK.INDEX [COG-ST type-id ] ] ].

demonstrative-determiner-lex := determiner-lex-supertype & determiner-lex &
    [ SYNSEM [LKEYS [ALTKEYREL arg1-ev-relation ] ] ] & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX [COG-ST activ+fam ] ].

proximal_nom-determiner-lex := demonstrative-determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                            CONT.HOOK.INDEX.PNG.PER 3rd ] ].

proximal_others-determiner-lex := demonstrative-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE non-abs+nom,
                                            CONT.HOOK.INDEX.PNG.PER 3rd ] ].

hearer_nom-determiner-lex := demonstrative-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                            CONT.HOOK.INDEX.PNG.PER 3rd ] ].

hearer_others-determiner-lex := demonstrative-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE non-abs+nom,
                                            CONT.HOOK.INDEX.PNG.PER 3rd ] ].

remote_nom-determiner-lex := demonstrative-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                            CONT.HOOK.INDEX.PNG.PER 3rd ] ].

remote_others-determiner-lex := demonstrative-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CAT.HEAD.CASE non-abs+nom,
                                            CONT.HOOK.INDEX.PNG.PER 3rd ] ].

determiner-lex-supertype := norm-hook-lex-item & basic-zero-arg &
  [ SYNSEM [ LOCAL [ CAT [ HEAD det,
			   VAL[ SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX #ind,
				  			     LTOP #larg ],
                                SPR < >,
                                SUBJ < >,
                                COMPS < >]],
		     CONT.HCONS < ! qeq &
				 [ HARG #harg,
				   LARG #larg ] ! > ], 
	     LKEYS.KEYREL quant-relation &
		   [ ARG0 #ind,
		     RSTR #harg ] ] ].

; Type for negative adverbs.
; 
; Constrain the MOD value of this adverb to keep
; 
;     it from modifying the kind of verbs which can select it,
; 
;     To keep spurious parses down, as a starting point, we have
; 
;     assumed that it only modifies verbs (e.g., non-finite verbs).

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT.HEAD verb,
                                    LIGHT + ] > ] ].

; Types for adjectives

adjective-lex := basic-adjective-lex & intersective-mod-lex & norm-ltop-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD noun, VAL.SPR cons ]] >,
						   VAL [ SPR < >,
								 SUBJ < >,
								 COMPS < >,
								 SPEC < > ],
						   POSTHEAD - ],
						 CONT.HOOK.XARG #xa ],
				   LKEYS.KEYREL.ARG1 #xa ]].

infl-adjective-lex := adjective-lex & 
    [ INFLECTED [ ADJ-CASE-SUFFIX-FLAG +]].

focus-part-lex-item := basic-adjective-lex & intersective-mod-lex & norm-ltop-lex-item & mkg-fc-only-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD noun, VAL.SPR cons ],
												CONT.HOOK.--ICONS focus ] ] >,
						   VAL [ SPR < >,
								 SUBJ < >,
								 COMPS <  >,
								 SPEC < > ],
						   POSTHEAD +],
					 CONT.HOOK [XARG #xa] ],
			 LKEYS.KEYREL.ARG1 #xa ] ].

also-lex-item := basic-adjective-lex & intersective-mod-lex & norm-ltop-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD +nv, VAL.SPR cons ]] >,
						   VAL [ SPR < >,
								 SUBJ < >,
								 COMPS <  >,
								 SPEC < > ],
						   POSTHEAD +],
					 CONT.HOOK [XARG #xa] ],
			 LKEYS.KEYREL.ARG1 #xa ] ].

;; Types for adverbs

adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
						   VAL [ SPR < >,
								 SUBJ < >,
								 COMPS < >,
								 SPEC < > ]]]]].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

preverb-rule-dtr := word-or-lexrule.
noun-case-suffix-rule-dtr := word-or-lexrule.
PSF-rule-dtr := word-or-lexrule.
1_2_plurality-rule-dtr := word-or-lexrule.
1st_2nd_person_subj_prefixes-rule-dtr := word-or-lexrule.
tense_and_3rd_subj-rule-dtr := word-or-lexrule.
noun-plurality-rule-dtr := word-or-lexrule.

;;; Lexical rule types

noun-case-suffix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ NOUN-CASE-SUFFIX-FLAG +,
				NOUN-PLURALITY-FLAG #flag ],
    DTR noun-case-suffix-rule-dtr & 
			  [ INFLECTED.NOUN-PLURALITY-FLAG #flag ] ].

nominative_noun_vowel_ending-lex-rule := noun-case-suffix-lex-rule-super &
  [ DTR.INFLECTED.GENERAL_ENDING_VOWEL-NOUN-FLAG +,
    SYNSEM.LOCAL [ CAT.HEAD.CASE abs+nom,
                   CONT.HOOK.INDEX.PNG.NUM singular ] ].

nominative-noun-lex-rule := noun-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abs+nom ].

dative-noun-lex-rule := noun-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

ergative-noun-lex-rule := noun-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

noun-plurality-lex-rule-super := add-only-no-ccont-rule & noun-case-suffix-rule-dtr &
  [ INFLECTED [ NOUN-PLURALITY-FLAG +,
                GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix ],
    DTR noun-plurality-rule-dtr &
        [ INFLECTED [ GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                      NOUN-CASE-SUFFIX-FLAG #noun-case-suffix ] ] ].

plural-noun-lex-rule := infl-lex-rule & noun-plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

singular-noun-lex-rule := const-lex-rule & noun-plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

1st_2nd_person_subj_prefixes-lex-rule-super := 1_2_plurality-rule-dtr & PSF-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & preverb-rule-dtr & tense_and_3rd_subj-rule-dtr &
  [ INFLECTED [ INTRANS-TENSE-FLAG +,
                TRANS-TENSE-FLAG +,
                PREVERB_OTHER-FLAG #preverb_other,
                PREVERB-FLAG #preverb,
                TRANS-VERB-FLAG #trans-verb,
                2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                INTRANS-VERB-FLAG #intrans-verb,
                TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG ],
    DTR 1st_2nd_person_subj_prefixes-rule-dtr &
        [ INFLECTED [ PREVERB_OTHER-FLAG #preverb_other,
                      PREVERB-FLAG #preverb,
                      TRANS-VERB-FLAG #trans-verb,
                      2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                      3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      INTRANS-VERB-FLAG #intrans-verb,
                      TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                      3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG ] ] ].

1st_subj_prefix-lex-rule := 1st_2nd_person_subj_prefixes-lex-rule-super &
  [ DTR.INFLECTED [ 2ND_OBJ_PREFIX-FLAG na, TYPE-4 na-or--],
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

1st_subj_prefix-lex-rule-type4 := 1st_2nd_person_subj_prefixes-lex-rule-super &
  [ DTR.INFLECTED [ 2ND_OBJ_PREFIX-FLAG na, TYPE-4 + ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

1st_subj_prefix_2nd_obj-lex-rule := 1st_2nd_person_subj_prefixes-lex-rule-super &
  [ DTR.INFLECTED [ 2ND_OBJ_PREFIX-FLAG +, TYPE-4 na-or-- ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2nd_subj_prefix-lex-rule := 1st_2nd_person_subj_prefixes-lex-rule-super &
  [ DTR.INFLECTED.TYPE-4 na-or--,
	SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

2nd_subj_prefix-lex-rule-type4 := 1st_2nd_person_subj_prefixes-lex-rule-super &
  [ DTR.INFLECTED.TYPE-4 +,
	SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

obj_prefix-lex-rule-super := 1_2_plurality-rule-dtr & 1st_2nd_person_subj_prefixes-rule-dtr & PSF-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & preverb-rule-dtr & tense_and_3rd_subj-rule-dtr &
  [ INFLECTED [ OBJ_PREFIX-FLAG +,
                PREVERB_OTHER-FLAG #preverb_other,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                PREVERB-FLAG #preverb,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG,
                TRANS-VERB-FLAG #trans-verb,
                PSF-FLAG #psf,
                INTRANS-VERB-FLAG #intrans-verb,
                TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    DTR transitive-verb-lex &
        [ INFLECTED [ PREVERB_OTHER-FLAG #preverb_other,
                      TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                      PREVERB-FLAG #preverb,
                      3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                      3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG,
                      TRANS-VERB-FLAG #trans-verb,
                      PSF-FLAG #psf,
                      INTRANS-VERB-FLAG #intrans-verb,
                      TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                      INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ] ] ].

2nd_obj_prefix-lex-rule := obj_prefix-lex-rule-super &
  [ INFLECTED.2ND_OBJ_PREFIX-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

3rd_obj_prefix-lex-rule := obj_prefix-lex-rule-super &
  [ INFLECTED.2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
    DTR.INFLECTED.2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

1st_pl_obj_prefix-lex-rule := obj_prefix-lex-rule-super &
  [ INFLECTED.2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
    DTR.INFLECTED.2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                 PER 1st ] ].

1st_sg_obj_prefix-lex-rule := obj_prefix-lex-rule-super &
  [ INFLECTED.2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
    DTR.INFLECTED.2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                 PER 1st ] ].

preverb-lex-rule-super := 1_2_plurality-rule-dtr & PSF-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & tense_and_3rd_subj-rule-dtr &
  [ INFLECTED [ PREVERB-FLAG +,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                TRANS-VERB-FLAG #trans-verb,
                NOUN-PLURALITY-FLAG #noun-plurality,
                GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG,
                OBJ_PREFIX-FLAG #obj_prefix,
                2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                INTRANS-VERB-FLAG #intrans-verb,
                TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    DTR preverb-rule-dtr &
        [ INFLECTED [ TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                      TRANS-VERB-FLAG #trans-verb,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                      3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                      NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      INTRANS-VERB-FLAG #intrans-verb,
                      TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                      INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ] ] ].

NOPRE-lex-rule := preverb-lex-rule-super &
  [ INFLECTED [ PSF-FLAG -,
                PREVERB_OTHER-FLAG #preverb_other ],
    DTR.INFLECTED.PREVERB_OTHER-FLAG #preverb_other,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

preverb_future-lex-rule := preverb-lex-rule-super &
  [ INFLECTED [ PSF-FLAG -,
                PREVERB_OTHER-FLAG #preverb_other ],
    DTR.INFLECTED.PREVERB_OTHER-FLAG #preverb_other,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

preverb_other-lex-rule := preverb-lex-rule-super &
  [ INFLECTED [ PREVERB_OTHER-FLAG +,
                PSF-FLAG #psf ],
    DTR.INFLECTED.PSF-FLAG #psf ].

PSF-lex-rule-super := 1_2_plurality-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & tense_and_3rd_subj-rule-dtr &
  [ INFLECTED [ PSF-FLAG +,
                PREVERB_OTHER-FLAG #preverb_other,
                NOUN-PLURALITY-FLAG #noun-plurality,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                OBJ_PREFIX-FLAG #obj_prefix,
                GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG,
                TRANS-VERB-FLAG #trans-verb,
                PREVERB-FLAG #preverb,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                INTRANS-VERB-FLAG #intrans-verb,
                TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    DTR PSF-rule-dtr &
        [ INFLECTED [ PREVERB_OTHER-FLAG #preverb_other,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                      2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                      3_SUBJ-INTRANS-FLAG #3_SUBJ-INTRANS-FLAG,
                      TRANS-VERB-FLAG #trans-verb,
                      PREVERB-FLAG #preverb,
                      NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      INTRANS-VERB-FLAG #intrans-verb,
                      TENSE_AND_3RD_SUBJ-FLAG #tense_and_3rd_subj,
                      INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ] ] ].

has_PSF-lex-rule := PSF-lex-rule-super.

tense_and_3rd_subj-lex-rule-super := 1_2_plurality-rule-dtr & add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ 3_SUBJ-INTRANS-FLAG +,
                TENSE_AND_3RD_SUBJ-FLAG +,
                PREVERB_OTHER-FLAG #preverb_other,
                PREVERB-FLAG #preverb,
                NOUN-PLURALITY-FLAG #noun-plurality,
                2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                OBJ_PREFIX-FLAG #obj_prefix,
                PSF-FLAG #psf,
                NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                INTRANS-VERB-FLAG #intrans-verb,
                TRANS-VERB-FLAG #trans-verb ],
    DTR tense_and_3rd_subj-rule-dtr &
        [ INFLECTED [ PREVERB_OTHER-FLAG #preverb_other,
                      PREVERB-FLAG #preverb,
                      NOUN-PLURALITY-FLAG #noun-plurality,
                      2ND_OBJ_PREFIX-FLAG #2nd_obj_prefix,
                      DETERMINER-CASE-SUFFIX-FLAG #determiner-case-suffix,
                      GENERAL_ENDING_VOWEL-NOUN-FLAG #general_ending_vowel-noun,
                      OBJ_PREFIX-FLAG #obj_prefix,
                      PSF-FLAG #psf,
                      NOUN-CASE-SUFFIX-FLAG #noun-case-suffix,
                      INTRANS-VERB-FLAG #intrans-verb,
                      TRANS-VERB-FLAG #trans-verb ] ] ].

erg-nom-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED.INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG,
    DTR.INFLECTED [ TRANS-VERB-FLAG +,
                    INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE nom ] ].

3rd_person_erg_nom-lex-rule := erg-nom-lex-rule &
  [ INFLECTED.TRANS-TENSE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

3_sg_subj_aor_trans-lex-rule := 3rd_person_erg_nom-lex-rule &
  [ INFLECTED [ TRANS-TENSE-FLAG +,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG ],
    DTR.INFLECTED [ PSF-FLAG na,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT perfective,
									   MOOD indicative],
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ] ].

3_pl_subj_aor_trans-lex-rule := 3rd_person_erg_nom-lex-rule &
  [ DTR.INFLECTED.PSF-FLAG na,
    INFLECTED [ 3_SUBJ-TRANS-FLAG +,
                TRANS-TENSE-FLAG + ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural,
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT perfective,
									   MOOD indicative ] ] ].

aorist_trans-lex-rule := erg-nom-lex-rule &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG na,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT perfective ],
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ] ].

nom-dat-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED.INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG,
    DTR.INFLECTED [ TRANS-VERB-FLAG +,
                    INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

imperfect_trans-lex-rule := nom-dat-lex-rule &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    PREVERB_OTHER-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd,
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT imperfective,
									   MOOD indicative ] ] ].

3rd_person_nom_dat-lex-rule := nom-dat-lex-rule &
  [ INFLECTED.TRANS-TENSE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

3_pl_subj_pres_trans-lex-rule := 3rd_person_nom_dat-lex-rule &
  [ DTR.INFLECTED.PSF-FLAG +,
    INFLECTED [ 3_SUBJ-TRANS-FLAG +,
                TRANS-TENSE-FLAG + ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural,
                   CONT.HOOK.INDEX.E [ TENSE non-past,
									   MOOD indicative ] ] ].

3_sg_subj_pres_trans-lex-rule := 3rd_person_nom_dat-lex-rule &
  [ DTR.INFLECTED.PSF-FLAG +,
    INFLECTED [ 3_SUBJ-TRANS-FLAG +,
                TRANS-TENSE-FLAG + ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular,
                   CONT.HOOK.INDEX.E [ TENSE non-past,
									   MOOD indicative ] ] ].

3_pl_subj_past_imperf_trans-lex-rule := 3rd_person_nom_dat-lex-rule &
  [ INFLECTED [ TRANS-TENSE-FLAG +,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    PREVERB_OTHER-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural,
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT imperfective,
									   MOOD indicative ] ] ].

3_sg_subj_past_imperf_trans-lex-rule := 3rd_person_nom_dat-lex-rule &
  [ INFLECTED [ TRANS-TENSE-FLAG +,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    PREVERB_OTHER-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT imperfective,
									   MOOD indicative ],
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ] ].

pres-fut_trans-lex-rule := nom-dat-lex-rule &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [TENSE non-past,
									   MOOD indicative],
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ] ].

pres-fut_trans-lex-rule-type4 := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ TYPE-4 +,
				3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
				TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG na,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE non-past,
									   MOOD indicative ],
                   CAT.VAL.SUBJ.FIRST.LOCAL [CONT.HOOK.INDEX.PNG.PER non-3rd, CAT.HEAD.CASE nom ] ] ].

aorist_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG,
				TYPE-4 na-or--],
    DTR.INFLECTED [ PSF-FLAG na,
                    INTRANS-VERB-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                    INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE erg,
                                              CONT.HOOK.INDEX.PNG.PER non-3rd ],
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT perfective,
									   MOOD indicative ] ] ].

3_sg_subj_pres_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG +,
                3_SUBJ-INTRANS-FLAG +,
                INTRANS-TENSE-FLAG +,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE non-past,
									   MOOD indicative ],
                   CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                              CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                    PER 3rd ] ] ] ].

3_pl_subj_pres_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG +,
                3_SUBJ-INTRANS-FLAG +,
                INTRANS-TENSE-FLAG +,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                              CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                    PER 3rd ] ],
                   CONT.HOOK.INDEX.E [ TENSE non-past,
									   MOOD indicative ] ] ].

pres-fut_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    INTRANS-VERB-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                    INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                              CONT.HOOK.INDEX.PNG.PER non-3rd ],
                   CONT.HOOK.INDEX.E [ TENSE non-past,
									   MOOD indicative ] ] ].

imperfect_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    PREVERB_OTHER-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG,
                    INTRANS-TENSE-FLAG #INTRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.PER non-3rd,
                                              CAT.HEAD.CASE abs+nom ],
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT imperfective,
									   MOOD indicative ] ] ].

3_sg_subj_aor_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-INTRANS-FLAG +,
                INTRANS-TENSE-FLAG +,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG na,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE erg,
                                              CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                    PER 3rd ] ],
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT perfective,
									   MOOD indicative ] ] ].

3_pl_subj_aor_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG +,
                3_SUBJ-INTRANS-FLAG +,
                INTRANS-TENSE-FLAG +,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG na,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE erg,
                                              CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                    PER 3rd ] ],
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT perfective,
									   MOOD indicative ] ] ].

3_pl_subj_past_imperf_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-INTRANS-FLAG +,
                INTRANS-TENSE-FLAG +,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    PREVERB_OTHER-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                    NUM plural ],
                                              CAT.HEAD.CASE abs+nom ],
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT imperfective,
									   MOOD indicative ] ] ].

3_sg_subj_past_imperf_intrans-lex-rule := tense_and_3rd_subj-lex-rule-super &
  [ INFLECTED [ 3_SUBJ-INTRANS-FLAG +,
                INTRANS-TENSE-FLAG +,
                3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG +,
                    PREVERB_OTHER-FLAG +,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD.CASE abs+nom,
                                              CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                    NUM singular ] ],
                   CONT.HOOK.INDEX.E [ TENSE past,
                                       ASPECT imperfective,
									   MOOD indicative ] ] ].

1_2_plurality-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR 1_2_plurality-rule-dtr &
        [ INFLECTED #infl &
                    [ 3_SUBJ-TRANS-FLAG na ] ] ].

1_2_subj_plural_suffix-lex-rule := 1_2_plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                PER non-3rd ] ].

2_obj_plural-lex-rule := 1_2_plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                   PER 2nd ],
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM number,
                                                                  PER person ] ] ].

1_2_subj_singular_suffix-lex-rule := 1_2_plurality-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER non-3rd ] ].

determiner-case-suffix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ DETERMINER-CASE-SUFFIX-FLAG +],
    DTR indeterminate-determiner-lex ].

nominative-deter-lex-rule := determiner-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE abs+nom ].

dative-deter-lex-rule := determiner-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE dat ].

ergative-deter-lex-rule := determiner-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE erg ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus.

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; Rules for building adjectives

adj-case-suffix-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ ADJ-CASE-SUFFIX-FLAG + ],
    DTR adjective-lex ].

nominative-adj-lex-rule :=  adj-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.CASE abs+nom ].

dative-adj-lex-rule :=  adj-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.CASE dat ].

ergative-adj-lex-rule :=  adj-case-suffix-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.CASE erg ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;; self added rules
;; verbs with clausal arguments

comp-verb-lex := clausal-second-arg-trans-lex-item & verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS  < #comps & [ LOCAL [CAT [ VAL [COMPS < >, SUBJ < >],
												HEAD +vc ],
												CONT.HOOK.INDEX.SF prop-or-ques ] ] > ,
	ARG-ST < [ ], #comps  >].

prop-clause-verb-lex := comp-verb-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SF prop ] > ].

ques-clause-verb-lex := comp-verb-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS  < [ LOCAL.CONT.HOOK.INDEX.SF ques ] > ] & [ SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD comp ] > ].

;; complementizers
complementizer-lex-item := raise-sem-lex-item & basic-one-arg &  
  [ ARG-ST < #ind >,
    SYNSEM.LOCAL.CAT.VAL [COMPS < #ind >, SUBJ < > ] ] & [ SYNSEM.LOCAL.CAT [ HEAD comp ] ] & [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [CAT [ VAL [COMPS < >, SUBJ < >], HEAD verb ] ] ] > ].

prop-comp-lex-item := complementizer-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

ques-comp-lex-item := complementizer-lex-item & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

;; adpositions
locative-suffix-item := basic-int-mod-adposition-lex & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD +nv ]] >,
						   VAL [ SPR < >,
								 SUBJ < >,
								 COMPS < #comps >,
								 SPEC < > ] ],
					 CONT.HOOK [XARG #xa] ],
			 LKEYS.KEYREL [ ARG1 #xa, ARG2 #arg ] ],
	ARG-ST < [ ],
             #comps & [OPT -,
					   LOCAL [ CAT [ HEAD noun,
								   VAL [ SPR < >,
										 SUBJ < >,
										 COMPS < >,
										 SPEC < > ] ],
							   CONT.HOOK.INDEX #arg ] ] > ].

; ;; postposition that requires dative case
dat-locative-suffix-item := locative-suffix-item &
  [ ARG-ST < [ ], [LOCAL.CAT.HEAD.CASE dat ] > ].

;; copulas
;; for AP and PP
copula-verb-lex := trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT [HEAD verb, VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun, HEAD.CASE abs+nom ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD +jp ] ] > ].

3sg-pres-copula-lex := copula-verb-lex &
  [ SYNSEM.LOCAL [ CAT [VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                    NUM singular ] ] ],
                   CONT.HOOK.INDEX.E [ TENSE present ] ] ].

;; for NP (i.e. just a transitive that specifies it's person and number)

copula-NP-verb-lex := basic-verb-lex & non-mod-lex-item & 1_2_plurality-rule-dtr & 1st_2nd_person_subj_prefixes-rule-dtr & PSF-rule-dtr & preverb-rule-dtr & tense_and_3rd_subj-rule-dtr &
  [ ARG-ST < #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ], [LOCAL.CONT.HOOK.INDEX #xarg2 ] >,
    SYNSEM [ LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ],
                         HC-LIGHT - ] ],
			 LKEYS.KEYREL [ ARG1 #xarg, ARG2 #xarg2 ] ]
		   ].

copula-NP-lex := copula-NP-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL[ CAT.HEAD noun, CAT.HEAD.CASE abs+nom ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun, HEAD.CASE abs+nom ] ] > ].

3sg-pres-copula-NP-lex := copula-NP-lex &
  [ SYNSEM.LOCAL [ CAT [VAL.SUBJ.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                    NUM singular ] ] ],
                   CONT.HOOK.INDEX.E [ TENSE present ] ] ].

optative_trans-lex-rule := erg-nom-lex-rule &
  [ INFLECTED [ 3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    DTR.INFLECTED [ PSF-FLAG na,
                    3_SUBJ-TRANS-FLAG #3_SUBJ-TRANS-FLAG,
                    TRANS-TENSE-FLAG #TRANS-TENSE-FLAG ],
    SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ MOOD optative ],
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ] ].

;; focus marking adposition
